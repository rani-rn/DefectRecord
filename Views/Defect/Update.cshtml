@using DefectRecord.Models
@model DefectReport

@{
    ViewData["Title"] = "Update Defect";
}
<style>
    .ts-wrapper {
        border: none !important;
        background-color: #D9D9D9 !important;
        border-radius: 5px;
        color: black;
        padding: 1px;
        width: 100%;
        transition: background-color 0.3s ease-in-out;
    }

    .ts-wrapper.focus {
        background-color: white !important;
        border: 1px solid #0F58A8 !important;
    }
</style>
<link href="https://cdn.jsdelivr.net/npm/tom-select/dist/css/tom-select.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container">
    <h2 class="text-header">Update Defect</h2>
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <form class="form-update" method="post" asp-action="Update" >
                <input type="hidden" asp-for="ReportId" />
                <div class="mb-3">
                    <label for="serialNumber" class="form-label">Serial Number</label>
                    <input asp-for="SerialNumber" type="text" id="serialNumber" name="SerialNumber" class="form-control" readonly>
                </div>
                <div class="row">
                    <div class="mb-3 col-md-6">
                        <label for="reporter" class="form-label">Reporter</label>
                        <input asp-for="Reporter" type="text" id="reporter" name="Reporter" class="form-control">
                    </div>
                    <div class="mb-3 col-md-6">
                        <label for="userRole" class="form-label">Role</label>
                        <select id="userRole" name="RoleId" asp-for="RoleId" class="form-control">
                            <option value="">Select Your Role</option>
                            @foreach (var userRole in (ViewBag.UserRoles ?? new List<UserRole>()))
                            {
                                <option value="@userRole.RoleId">@userRole.RoleName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="lineProduction" class="form-label">Line Production</label>
                    <select id="lineProduction" name="LineProductionId" class="form-control" asp-for="LineProductionId">
                        <option value="">Select Line Production</option>
                        @foreach (var line in (ViewBag.LineProductions ?? new List<LineProduction>()))
                        {
                            <option value="@line.Id">@line.LineProductionName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="defectRecord" class="form-label">Defect Record</label>
                    <select id="defectRecord" name="DefectId" class="form-control" asp-for="DefectId">
                        <option value="">Select Defect</option>
                        @foreach (var defect in (ViewBag.Defects ?? new List<Defect>()))
                        {
                            <option value="@defect.DefectId">@defect.DefectName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <textarea id="description" asp-for="Description" class="form-control" rows="3"></textarea>
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status</label>
                    <select id="status" name="Status" class="form-control" asp-for="Status">
                        <option value="">Select Status</option>
                        <option value="Repair">Repair</option>
                        <option value="Pending">Pending</option>
                    </select>
                </div><br>
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-primary" id="updateButton">Update</button>
                    <button type="button" class="btn btn-danger" id="cancelButton">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        new TomSelect("#defectRecord", {
            create: true,
            sortField: {
                field: "text",
                direction: "asc"
            },
        });
    });

    
    document.getElementById("updateButton").addEventListener("click", function (event) {
        let reporter = document.getElementById("reporter").value.trim();
        let userRole = document.getElementById("userRole").value;
        let lineProduction = document.getElementById("lineProduction").value;
        let defectRecord = document.getElementById("defectRecord").value;
        let status = document.getElementById("status").value;

        let form = document.querySelector(".form-update");

        let emptyFields = [];

        if (!serialNumber) emptyFields.push("Serial Number");
        if (!reporter) emptyFields.push("Reporter");
        if (!userRole) emptyFields.push("Role");
        if (!lineProduction) emptyFields.push("Line Production");
        if (!defectRecord) emptyFields.push("Defect Record");
        if (!status) emptyFields.push("Status");


        if (emptyFields.length > 0) {
            Swal.fire({
                title: "Missing Fields!",
                text: `Please fill in the following fields: \n${emptyFields.join(", ")}`,
                icon: "warning",
                confirmButtonColor: "#0F58A8"
            });
            return;
        }

        Swal.fire({
            title: "Confirmation!",
            text: "Are you sure you want to update this report?",
            icon: "question",
            showCancelButton: true,
            confirmButtonColor: "#007bff",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, Update!",
            cancelButtonText: "Cancel"
        }).then((result) => {
            if (result.isConfirmed) {
                form.submit();
            }
        });
    });

    document.getElementById("cancelButton").addEventListener("click", function () {
        Swal.fire({
            title: "Confirmation",
            text: "Are you sure to cancel? Any unsaved changes will be lost.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#28a745",
            confirmButtonText: "Yes, Cancel!",
            cancelButtonText: "Back"
        }).then((result) => {
            if (result.isConfirmed) {
                window.history.back();
            }
        });
    });
</script>
